	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_main
_main:
	call	_begin
	call	_gfx_Begin
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 50
	push	hl
	ld	hl, _global_palette
	push	hl
	call	_gfx_SetPalette
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
BB0_1:
	call	_step
	xor	a, 1
	bit	0, a
	jq	nz, BB0_3
	call	_draw
	call	_gfx_SwapDraw
	jq	BB0_1
BB0_3:
	call	_gfx_End
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_begin
_begin:
	ld	hl, -149
	call	__frameset
	ld	hl, _Table_l_data
	ld	de, L___const.begin.initballsprite
	ld	bc, -140
	lea	iy, ix
	add	iy, bc
	ld	(iy), de
	ld	de, _balls+7
	push	ix
	ld	bc, -137
	add	ix, bc
	ld	(ix), de
	pop	ix
	lea	de, ix - 70
	push	ix
	ld	bc, -143
	add	ix, bc
	ld	(ix), de
	pop	ix
	push	ix
	ld	bc, -134
	add	ix, bc
	lea	de, ix
	pop	ix
	push	ix
	ld	bc, -146
	add	ix, bc
	ld	(ix), de
	pop	ix
	ld	de, (_Table_r)
	push	de
	push	hl
	call	_gfx_RotateSpriteHalf
	pop	hl
	pop	hl
	ld	hl, (_Table_br)
	push	hl
	ld	hl, _Table_tl_data
	push	hl
	call	_gfx_RotateSpriteHalf
	pop	hl
	pop	hl
	ld	hl, (_Table_bl)
	push	hl
	ld	hl, _Table_tr_data
	push	hl
	call	_gfx_RotateSpriteHalf
	pop	hl
	pop	hl
	ld	hl, 7143424
	ld	(ix - 70), hl
	ld	a, 67
	ld	(ix - 67), a
	ld	hl, 7667712
	ld	(ix - 66), hl
	ld	(ix - 63), a
	ld	(ix - 62), hl
	ld	(ix - 59), a
	ld	hl, 8192000
	ld	(ix - 58), hl
	ld	(ix - 55), a
	ld	(ix - 54), hl
	ld	(ix - 51), a
	ld	(ix - 50), hl
	ld	(ix - 47), a
	ld	hl, -8224768
	ld	(ix - 46), hl
	ld	(ix - 43), a
	ld	(ix - 42), hl
	ld	(ix - 39), a
	ld	(ix - 38), hl
	ld	(ix - 35), a
	ld	(ix - 34), hl
	ld	(ix - 31), a
	ld	hl, -7962624
	ld	(ix - 30), hl
	ld	(ix - 27), a
	ld	(ix - 26), hl
	ld	(ix - 23), a
	ld	(ix - 22), hl
	ld	(ix - 19), a
	ld	(ix - 18), hl
	ld	(ix - 15), a
	ld	(ix - 14), hl
	ld	(ix - 11), a
	ld	hl, -7995392
	ld	(ix - 10), hl
	dec	a
	ld	(ix - 7), a
	ld	hl, -6160384
	ld	de, -134
	lea	iy, ix
	add	iy, de
	ld	(iy), hl
	push	ix
	ld	de, -131
	add	ix, de
	ld	(ix), a
	pop	ix
	ld	bc, -6684672
	push	ix
	inc	de
	add	ix, de
	ld	(ix), bc
	pop	ix
	ld	(ix - 127), a
	ld	iy, -5636096
	ld	(ix - 126), iy
	ld	(ix - 123), a
	ld	de, -7208960
	ld	(ix - 122), de
	ld	(ix - 119), a
	ld	(ix - 118), hl
	ld	(ix - 115), a
	ld	hl, -5111808
	ld	(ix - 114), hl
	ld	(ix - 111), a
	ld	de, -7645867
	ld	(ix - 110), de
	ld	(ix - 107), a
	ld	(ix - 106), bc
	ld	(ix - 103), a
	ld	(ix - 102), iy
	ld	(ix - 99), a
	ld	de, -4543829
	ld	(ix - 98), de
	ld	(ix - 95), a
	ld	de, -8257536
	ld	(ix - 94), de
	ld	(ix - 91), a
	ld	de, -7208960
	ld	(ix - 90), de
	ld	(ix - 87), a
	ld	bc, -6160384
	ld	(ix - 86), bc
	ld	(ix - 83), a
	ld	(ix - 82), hl
	ld	(ix - 79), a
	ld	de, -4063232
	ld	(ix - 78), de
	ld	(ix - 75), a
	ld	(ix - 74), bc
	ld	(ix - 71), a
	ld	bc, 64
	or	a, a
	sbc	hl, hl
BB1_1:
	push	hl
	pop	de
	or	a, a
	sbc	hl, bc
	jq	z, BB1_2
	ld	bc, -140
	lea	hl, ix
	add	hl, bc
	ld	hl, (hl)
	ld	hl, (hl)
	ld	bc, -137
	lea	iy, ix
	add	iy, bc
	ld	iy, (iy)
	ld	(iy - 7), hl
	push	de
	pop	bc
	ld	de, -149
	lea	hl, ix
	add	hl, de
	ld	(hl), bc
	ld	de, -143
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	add	iy, bc
	lea	hl, iy
	ld	hl, (hl)
	ld	a, (iy + 3)
	ld	de, -137
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy - 4), hl
	ld	(iy - 1), a
	ld	de, -146
	lea	hl, ix
	add	hl, de
	ld	iy, (hl)
	add	iy, bc
	lea	hl, iy
	ld	hl, (hl)
	ld	a, (iy + 3)
	ld	de, -137
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	ld	(iy), hl
	ld	(iy + 3), a
	or	a, a
	sbc	hl, hl
	ld	(iy + 4), hl
	xor	a, a
	ld	(iy + 7), a
	ld	(iy + 8), hl
	ld	de, -149
	lea	hl, ix
	add	hl, de
	ld	hl, (hl)
	ld	(iy + 11), a
	ld	bc, 4
	add	hl, bc
	ld	bc, 64
	lea	iy, iy + 19
	push	ix
	ld	de, -137
	add	ix, de
	ld	(ix), iy
	pop	ix
	ld	de, -140
	lea	iy, ix
	add	iy, de
	ld	iy, (iy)
	lea	iy, iy + 3
	push	ix
	add	ix, de
	ld	(ix), iy
	pop	ix
	jq	BB1_1
BB1_2:
	ld	hl, 4788187
	ld	(_balls+300), hl
	ld	a, 64
	ld	(_balls+303), a
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_step
_step:
	ld	hl, -24
	call	__frameset
	call	_kb_Scan
	ld	de, (_gamestate)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_1
	ld	hl, -720878
	ld	c, 63
	ld	iy, _balls+300
	ld	b, 64
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	ld	de, 0
	push	de
	pop	hl
	ld	a, b
	jq	nz, BB2_12
	ld	hl, -720876
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	z, BB2_7
	ld	a, 0
	jq	BB2_9
BB2_1:
	ld	bc, 2
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_2
	ld	hl, (_frame)
	push	hl
	pop	iy
	ld	de, 2
	add	iy, de
	ld	(_frame), iy
	ld	de, 39
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jq	m, BB2_3
	ld	hl, 3
	ld	bc, 5
	ld	de, 0
	ld	(_frame), de
	ld	(_gamestate), hl
	ld	hl, (_q_power)
	call	__idivs
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	ld	(_balls+296), bc
	ld	(_balls+299), a
	jq	BB2_36
BB2_2:
	ld	bc, 3
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_3
BB2_36:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	4, a
	jq	z, BB2_3
	ld	de, 15
	ld	hl, (_frame)
	inc	hl
	ld	(_frame), hl
	or	a, a
	sbc	hl, hl
	ld	(_zero_counter), hl
	ld	bc, 0
	push	hl
	pop	iy
BB2_38:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jq	m, BB2_39
	ld	(ix - 6), iy
	ld	(ix - 12), de
	ex	de, hl
	ld	bc, 19
	call	__imulu
	push	hl
	pop	de
	ld	hl, _balls
	push	hl
	pop	iy
	add	iy, de
	ld	(ix - 3), iy
	lea	de, iy + 11
	ld	hl, (iy + 11)
	lea	bc, iy
	ld	(ix - 18), hl
	push	de
	pop	iy
	lea	hl, iy + 3
	ld	(ix - 9), hl
	ld	a, (hl)
	ld	(ix - 21), a
	push	bc
	pop	iy
	lea	hl, iy + 15
	ld	de, (iy + 15)
	push	hl
	pop	iy
	lea	hl, iy + 3
	ld	a, (hl)
	ld	l, a
	push	hl
	push	de
	call	_cos
	ld	(ix - 24), hl
	pop	bc
	pop	bc
	ld	iy, (ix - 3)
	lea	hl, iy + 3
	ld	bc, (iy + 3)
	ld	(ix - 15), bc
	push	hl
	pop	iy
	lea	iy, iy + 3
	ld	d, (iy)
	ld	bc, (ix - 18)
	ld	a, (ix - 21)
	call	__fneg
	ld	hl, (ix - 24)
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, d
	call	__fadd
	ld	iy, (ix - 3)
	ld	(iy + 3), bc
	ld	(iy + 6), a
	ld	hl, (iy + 11)
	ld	(ix - 21), hl
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(ix - 18), a
	ld	hl, (iy + 15)
	ld	a, (iy + 18)
	ld	e, a
	push	de
	push	hl
	call	_sin
	ld	(ix - 24), hl
	pop	bc
	pop	bc
	ld	iy, (ix - 3)
	lea	hl, iy + 7
	ld	bc, (iy + 7)
	ld	(ix - 15), bc
	push	hl
	pop	iy
	lea	iy, iy + 3
	ld	d, (iy)
	ld	bc, (ix - 21)
	ld	a, (ix - 18)
	call	__fneg
	ld	hl, (ix - 24)
	call	__fmul
	ld	hl, (ix - 15)
	ld	e, d
	call	__fadd
	ld	iy, (ix - 3)
	ld	(iy + 7), bc
	ld	(iy + 10), a
	ld	bc, (iy + 11)
	ld	iy, -6039798
	ld	hl, (ix - 9)
	ld	a, (hl)
	lea	hl, iy
	ld	e, 60
	call	__fcmp
	ld	d, 1
	jq	m, BB2_43
	ld	d, 0
BB2_43:
	lea	hl, iy
	ld	e, -68
	call	__fadd
	bit	0, d
	jq	nz, BB2_45
	ld	bc, 0
BB2_45:
	bit	0, d
	jq	nz, BB2_47
	xor	a, a
BB2_47:
	ld	iy, (ix - 3)
	ld	(iy + 11), bc
	ld	(iy + 14), a
	push	iy
	call	_collidewalls
	pop	hl
	ld	bc, 0
	ld	hl, _balls+285
	push	hl
	pop	iy
	xor	a, a
BB2_48:
	push	bc
	pop	hl
	ld	de, 15
	add	hl, de
	ld	de, 0
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jq	m, BB2_49
	ld	hl, (ix - 6)
	ld	(ix - 15), bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_57
	ld	(ix - 9), iy
	ld	iy, (ix - 3)
	ld	bc, (iy + 3)
	ld	a, (iy + 6)
	ld	iy, (ix - 9)
	ld	hl, (iy + 3)
	ld	iy, (ix - 9)
	ld	e, (iy + 6)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	ld	(ix - 18), bc
	ld	d, a
	ld	iy, (ix - 3)
	ld	bc, (iy + 7)
	ld	a, (iy + 10)
	ld	iy, (ix - 9)
	ld	hl, (iy + 7)
	ld	e, (iy + 10)
	call	__fsub
	push	bc
	pop	hl
	ld	e, a
	call	__fmul
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 18)
	ld	a, d
	call	__fadd
	ld	hl, -8388608
	ld	e, 66
	call	__fcmp
	ld	a, 0
	jq	m, BB2_57
	ld	iy, (ix - 3)
	ld	hl, (iy + 11)
	ld	e, (iy + 14)
	ld	iy, (ix - 9)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	jq	nz, BB2_56
	ld	hl, (iy + 11)
	ld	e, (iy + 14)
	ld	bc, 0
	xor	a, a
	call	__fcmp
	ld	a, 0
	jq	z, BB2_57
BB2_56:
	push	iy
	ld	hl, (ix - 3)
	push	hl
	call	_collideballs
	ld	iy, (ix - 9)
	xor	a, a
	pop	hl
	pop	hl
BB2_57:
	lea	iy, iy - 19
	ld	bc, (ix - 15)
	dec	bc
	jq	BB2_48
BB2_49:
	ld	iy, (ix - 3)
	ld	hl, (iy + 11)
	ld	e, (iy + 14)
	ld	bc, 0
	call	__fcmp
	jq	nz, BB2_51
	ld	hl, (_zero_counter)
	inc	hl
	ld	(_zero_counter), hl
BB2_51:
	ld	de, (ix - 12)
	dec	de
	ld	iy, (ix - 6)
	dec	iy
	ld	bc, 0
	jq	BB2_38
BB2_7:
	ld	a, -1
BB2_9:
	bit	0, a
	ld	hl, -8388608
	jq	nz, BB2_11
	ex	de, hl
BB2_11:
	bit	0, a
	ld	a, c
	ld	iy, _balls+300
BB2_12:
	ld.sis	bc, 1
	ld	(ix - 3), hl
	ld	(_speedmult), hl
	ld	(ix - 6), a
	ld	(_speedmult+3), a
	ld	hl, -720866
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	3, a
	lea	hl, iy + 3
	ld	(ix - 9), hl
	jq	z, BB2_14
	ld	e, 61
	ld	iy, (_balls+300)
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	bc, (ix - 3)
	ld	a, (ix - 6)
	ld	hl, 2348810
	call	__fmul
	lea	hl, iy
	ld	e, d
	call	__fadd
	ld	(_balls+300), bc
	ld.sis	bc, 1
	ld	(_balls+303), a
BB2_14:
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	call	__sand
	ld	a, l
	xor	a, 1
	bit	0, a
	jq	nz, BB2_16
	ld	e, -67
	ld	hl, (_balls+300)
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	d, (hl)
	ld	bc, (ix - 3)
	ld	a, (ix - 6)
	ld	hl, 2348810
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, d
	call	__fadd
	ld	(_balls+300), bc
	ld	(_balls+303), a
BB2_16:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	ld	bc, (_q_power)
	bit	2, a
	jq	z, BB2_19
	push	bc
	pop	hl
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	(ix - 9), bc
	ld	bc, (ix - 9)
	ld	a, l
	call	__ltof
	push	bc
	pop	iy
	ld	d, a
	ld	bc, -3670016
	ld	a, 66
	ld	hl, (ix - 3)
	ld	e, (ix - 6)
	call	__fsub
	ld	(ix - 12), iy
	lea	hl, iy
	ld	iy, -720866
	ld	e, d
	call	__fcmp
	ld	bc, (ix - 9)
	jq	p, BB2_19
	ld	bc, (ix - 3)
	ld	a, (ix - 6)
	or	a, a
	sbc	hl, hl
	ld	e, 64
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, d
	call	__fadd
	call	__ftol
	ld	de, 1
	jq	BB2_23
BB2_19:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	jq	z, BB2_20
	ld	de, 100
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	de, 1
	jq	p, BB2_24
	ld	bc, 100
BB2_23:
	ld	(_q_power), bc
	jq	BB2_24
BB2_20:
	ld	de, 1
BB2_24:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jq	z, BB2_27
	push	bc
	pop	hl
	lea	de, iy
	push	bc
	pop	iy
	add	iy, iy
	push	de
	pop	iy
	sbc	hl, hl
	ld	(ix - 9), bc
	ld	bc, (ix - 9)
	ld	a, l
	call	__ltof
	ld	(ix - 12), bc
	ld	d, a
	ld	bc, (ix - 3)
	ld	a, (ix - 6)
	ld	hl, -8388608
	ld	e, 63
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	ld	bc, (ix - 12)
	ld	(ix - 15), d
	ld	a, d
	call	__fcmp
	ld	bc, (ix - 9)
	ld	de, 1
	jq	p, BB2_27
	ld	e, -64
	ld	bc, (ix - 3)
	ld	a, (ix - 6)
	or	a, a
	sbc	hl, hl
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 15)
	call	__fadd
	call	__ftol
	jq	BB2_29
BB2_27:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jq	z, BB2_30
	push	bc
	pop	iy
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	ld	bc, 0
	jq	m, BB2_31
BB2_29:
	ld	(_q_power), bc
BB2_30:
	push	bc
	pop	iy
BB2_31:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, 1
	bit	0, a
	jq	nz, BB2_3
	lea	hl, iy
	ld	de, 1
	or	a, a
	sbc	hl, de
	call	pe, __setflag
	jq	m, BB2_3
	ld	hl, 2
	ld	(_gamestate), hl
	ld	(_frame), hl
	jq	BB2_3
BB2_39:
	ld	hl, (_zero_counter)
	ld	de, 16
	or	a, a
	sbc	hl, de
	jq	nz, BB2_3
	ld	hl, 1
	ld	(_gamestate), hl
BB2_3:
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	6, a
	jq	z, BB2_4
	ld	a, 0
	jq	BB2_59
BB2_4:
	ld	a, -1
BB2_59:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_draw
_draw:
	ld	hl, -27
	call	__frameset
	ld	hl, 2
	ld	de, _balls+285
	ld	(ix - 3), de
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, -127
	push	hl
	ld	hl, 268
	push	hl
	ld	hl, 17
	push	hl
	ld	hl, 26
	push	hl
	call	_gfx_FillRectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	push	hl
	ld	hl, _Table_l_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 26
	push	hl
	ld	hl, _Table_tl_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	hl, 161
	push	hl
	ld	hl, _Table_tr_data
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_Table_bl)
	ld	de, -110
	push	de
	ld	de, 26
	push	de
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_Table_br)
	ld	de, -110
	push	de
	ld	de, 161
	push	de
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (_Table_r)
	ld	de, 0
	push	de
	ld	de, 294
	push	de
	push	hl
	call	_gfx_Sprite_NoClip
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 77
	push	hl
	ld	hl, 320
	push	hl
	ld	hl, -93
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_FillRectangle_NoClip
	ld	de, 15
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	bc, 0
BB3_1:
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	pe, __setflag
	jq	m, BB3_2
	ld	iy, (ix - 3)
	ld	hl, (iy)
	ld	(ix - 12), hl
	ld	bc, (iy + 3)
	ld	(ix - 15), bc
	ld	a, (iy + 6)
	ld	(ix - 9), a
	ld	a, (hl)
	srl	a
	or	a, a
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	xor	a, a
	call	__ultof
	push	bc
	pop	hl
	ld	(ix - 6), de
	ld	e, a
	ld	bc, (ix - 15)
	ld	a, (ix - 9)
	call	__fsub
	call	__ftol
	ld	(ix - 9), bc
	ld	(ix - 3), iy
	ld	hl, (iy + 7)
	ld	(ix - 15), hl
	ld	e, (iy + 10)
	ld	iy, (ix - 12)
	ld	a, (iy + 1)
	srl	a
	ld	bc, 0
	ld	c, a
	xor	a, a
	call	__ultof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 15)
	ld	a, e
	ld	e, d
	call	__fsub
	call	__ftol
	push	bc
	ld	hl, (ix - 9)
	push	hl
	push	iy
	call	_gfx_TransparentSprite_NoClip
	ld	bc, 0
	ld	de, (ix - 6)
	pop	hl
	pop	hl
	pop	hl
	dec	de
	ld	iy, (ix - 3)
	lea	iy, iy - 19
	ld	(ix - 3), iy
	jq	BB3_1
BB3_2:
	ld	hl, 170
	push	hl
	ld	hl, 10
	push	hl
	call	_gfx_SetTextXY
	pop	hl
	pop	hl
	ld	hl, L_.str
	push	hl
	call	_gfx_PrintString
	pop	hl
	ld	hl, (_zero_counter)
	ld	de, 1
	push	de
	push	hl
	call	_gfx_PrintInt
	pop	hl
	pop	hl
	ld	de, (_gamestate)
	ld	bc, 1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	ld	bc, 5
	ld	iy, _balls+288
	lea	hl, iy + 3
	ld	(ix - 9), hl
	ld	iy, _balls+300
	lea	hl, iy + 3
	ld	(ix - 3), hl
	ld	iy, _balls+292
	lea	hl, iy + 3
	ld	(ix - 6), hl
	jq	nz, BB3_4
	push	bc
	call	_gfx_SetColor
	pop	hl
	ld	hl, (_balls+288)
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(ix - 15), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_cos
	ld	(ix - 18), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	push	hl
	pop	iy
	ld	hl, 10
	push	hl
	pop	bc
	add	iy, bc
	lea	hl, iy
	lea	bc, iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 18)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 15)
	call	__fadd
	call	__ftol
	ld	(ix - 12), bc
	ld	hl, (_balls+292)
	ld	(ix - 18), hl
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	(ix - 15), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_sin
	ld	(ix - 21), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 10
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 21)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 18)
	ld	e, (ix - 15)
	call	__fadd
	call	__ftol
	ld	(ix - 15), bc
	ld	hl, (_balls+288)
	ld	(ix - 18), hl
	ld	a, (_balls+291)
	ld	(ix - 21), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_cos
	ld	(ix - 24), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	push	hl
	pop	iy
	ld	hl, 100
	push	hl
	pop	bc
	add	iy, bc
	lea	hl, iy
	lea	bc, iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 24)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 18)
	ld	e, (ix - 21)
	call	__fadd
	call	__ftol
	ld	(ix - 18), bc
	ld	hl, (_balls+292)
	ld	(ix - 21), hl
	ld	a, (_balls+295)
	ld	(ix - 24), a
	ld	hl, (_balls+300)
	ld	a, (_balls+303)
	ld	e, a
	push	de
	push	hl
	call	_sin
	ld	(ix - 27), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 100
	add	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 27)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 21)
	ld	e, (ix - 24)
	call	__fadd
	call	__ftol
	push	bc
	ld	hl, (ix - 18)
	push	hl
	ld	hl, (ix - 15)
	push	hl
	ld	hl, (ix - 12)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 3
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, 5
	push	hl
	ld	hl, 103
	push	hl
	ld	hl, -26
	push	hl
	ld	hl, 109
	push	hl
	call	_gfx_Rectangle_NoClip
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 4
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	hl, (_q_power)
	inc	hl
	ld	de, 3
	push	de
	push	hl
	ld	hl, -25
	push	hl
	ld	hl, 110
	push	hl
	call	_gfx_FillRectangle_NoClip
	ld	bc, 5
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	de, (_gamestate)
BB3_4:
	ld	iy, 2
	ex	de, hl
	lea	de, iy
	or	a, a
	sbc	hl, de
	jq	nz, BB3_6
	push	bc
	call	_gfx_SetColor
	pop	hl
	ld	hl, (_balls+288)
	ld	(ix - 12), hl
	ld	hl, (ix - 9)
	ld	a, (hl)
	ld	(ix - 9), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_cos
	ld	(ix - 15), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 30
	add	hl, bc
	ld	bc, (_frame)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 15)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 9)
	call	__fadd
	call	__ftol
	ld	(ix - 9), bc
	ld	hl, (_balls+292)
	ld	(ix - 12), hl
	ld	hl, (ix - 6)
	ld	a, (hl)
	ld	(ix - 6), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_sin
	ld	(ix - 15), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 30
	add	hl, bc
	ld	bc, (_frame)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 15)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 6)
	call	__fadd
	call	__ftol
	ld	(ix - 6), bc
	ld	hl, (_balls+288)
	ld	(ix - 12), hl
	ld	a, (_balls+291)
	ld	(ix - 15), a
	ld	bc, (_balls+300)
	ld	hl, (ix - 3)
	ld	a, (hl)
	ld	e, a
	push	de
	push	bc
	call	_cos
	ld	(ix - 3), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 120
	add	hl, bc
	ld	bc, (_frame)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 3)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 15)
	call	__fadd
	call	__ftol
	ld	(ix - 3), bc
	ld	hl, (_balls+292)
	ld	(ix - 12), hl
	ld	a, (_balls+295)
	ld	(ix - 15), a
	ld	hl, (_balls+300)
	ld	a, (_balls+303)
	ld	e, a
	push	de
	push	hl
	call	_sin
	ld	(ix - 18), hl
	pop	hl
	pop	hl
	ld	hl, (_q_power)
	ld	bc, 4
	call	__idivs
	ld	bc, 120
	add	hl, bc
	ld	bc, (_frame)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	push	bc
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	a, l
	call	__ltof
	push	bc
	pop	hl
	ld	d, a
	ld	bc, (ix - 18)
	ld	a, e
	ld	e, d
	call	__fmul
	ld	hl, (ix - 12)
	ld	e, (ix - 15)
	call	__fadd
	call	__ftol
	push	bc
	ld	hl, (ix - 3)
	push	hl
	ld	hl, (ix - 6)
	push	hl
	ld	hl, (ix - 9)
	push	hl
	call	_gfx_Line
	pop	hl
	pop	hl
	pop	hl
	pop	hl
BB3_6:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_end
_end:
	ret
	section	.text,"ax",@progbits

	section	.data,"aw",@progbits
	public	_Table_r_data
_Table_r_data:
	db	26
	db	163
	db	4238 dup 0

	section	.data,"aw",@progbits
	public	_Table_r
_Table_r:
	dl	_Table_r_data

	section	.data,"aw",@progbits
	public	_Table_br_data
_Table_br_data:
	db	17
	db	135
	db	2295 dup 0

	section	.data,"aw",@progbits
	public	_Table_br
_Table_br:
	dl	_Table_br_data

	section	.data,"aw",@progbits
	public	_Table_bl_data
_Table_bl_data:
	db	17
	db	135
	db	2295 dup 0

	section	.data,"aw",@progbits
	public	_Table_bl
_Table_bl:
	dl	_Table_bl_data

	section	.bss,"aw",@nobits
	public	_q_power
_q_power:
	rb	3

	section	.data,"aw",@progbits
	public	_gamestate
_gamestate:
	dl	1

	section	.bss,"aw",@nobits
	public	_frame
_frame:
	rb	3

	section	.data,"aw",@progbits
	public	_speedmult
_speedmult:
	dd	0x3f800000

	section	.rodata,"a",@progbits
	private	L___const.begin.initballsprite
L___const.begin.initballsprite:
	dl	_stripe_data
	dl	_solid_data
	dl	_stripe_data
	dl	_stripe_data
	dl	_eightball_data
	dl	_solid_data
	dl	_stripe_data
	dl	_solid_data
	dl	_solid_data
	dl	_stripe_data
	dl	_solid_data
	dl	_stripe_data
	dl	_solid_data
	dl	_stripe_data
	dl	_solid_data
	dl	_qball_data

	section	.bss,"aw",@nobits
	public	_balls
_balls:
	rb	304

	section	.bss,"aw",@nobits
	public	_zero_counter
_zero_counter:
	rb	3

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"test: ", 0

	ident	"clang version 14.0.0 (https://github.com/jacobly0/llvm-project 6d5b49201c74730cf332608210c1d55a002e1768)"
	extern	_collideballs
	extern	__Unwind_SjLj_Register
	extern	_solid_data
	extern	__frameset
	extern	_gfx_Rectangle_NoClip
	extern	_global_palette
	extern	_gfx_FillRectangle_NoClip
	extern	_eightball_data
	extern	_gfx_Begin
	extern	_gfx_Line
	extern	_sin
	extern	__fadd
	extern	_kb_Scan
	extern	_gfx_SetPalette
	extern	_gfx_RotateSpriteHalf
	extern	_Table_tr_data
	extern	_Table_l_data
	extern	_gfx_SwapDraw
	extern	_gfx_PrintString
	extern	__fmul
	extern	__ftol
	extern	__sand
	extern	__idivs
	extern	_gfx_SetDraw
	extern	__setflag
	extern	_qball_data
	extern	_gfx_PrintInt
	extern	__ultof
	extern	_stripe_data
	extern	__Unwind_SjLj_Unregister
	extern	_Table_tl_data
	extern	__fneg
	extern	_collidewalls
	extern	__imulu
	extern	_gfx_SetColor
	extern	__ltof
	extern	_gfx_TransparentSprite_NoClip
	extern	_gfx_End
	extern	_gfx_Sprite_NoClip
	extern	_cos
	extern	_gfx_SetTextXY
	extern	__fcmp
	extern	__fsub
